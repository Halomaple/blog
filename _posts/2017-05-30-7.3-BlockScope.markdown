---
layout: post
title: "7.3 模仿块级作用域"
date: 2017-05-30 14:00:00  +0800
categories: [Learning, JavaScript, Block Scope]
tags: [JS, Block Scope]
---

JavaScript没有块级作用域的概念。这意味着在块级语句中定义的变量，实际上是在包含函数中而非语句中创建的。

这个函数中定义了一个for循环，而变量i的初始值被设置为0。在Java、C++等语言中，变量只会在for循环的语句块中有定义，循环一旦结束，变量i就会被销毁。可在JavaScript中，变量i是定义在outputNumbers()的活动对象中的，因此从它有定义开始，就可以在函数内部随处访问它。

```
function outputNumbers(count){
	for(var i = 0; i < count; i++){
		console.log(i);
	}
	console.line();
	console.log(i);
}
outputNumbers(5);
```

JavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见。不过，它会执行后续声明中的变量初始化（如果是var i = undefined;的话，i最后的值就是undefined）。

```
function outputNumbers(count){
	for(var i = 0; i < count; i++){
		console.log(i);
	}
	console.line();
	var i;	//重新声明变量
	console.log(i);	//计数
}
outputNumbers(5);

```

匿名函数可以用来模仿<b>块级作用域</b>（通常称为<b>私有作用域</b>）并避免这个问题。

```
(function(){
	//这里是块级作用域
})();
```

以上代码定义并立即调用了一个匿名函数。将函数表明声明包含在一对圆括号中，表示它是一个函数表达式。而紧随其后的另一对圆括号会立即调用这个函数。
这样做之所以可行，是因为变量只不过是值的另一种表现形式，因此用实际的值替换变量没有问题。

```
try{
function(){
	//这里是块级作用域
}();//出错！
}catch(e){
	console.log(e);
}
//这段代码会导致语法错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟圆括号。然而，表达式的后面可以跟圆括号。要将函数声明转换成表达式，只要像下面这样给它加上一对圆括号即可。
(function(){
	//这里是块级作用域
})();
```

无论在什么地方，只要临时需要一下变量，就可以使用私有作用域。

这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域中添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突。而通过创建私有作用域，每个开发人员即可以食用自己的变量，又不必担心搞乱全局作用域。

```
(function(){
	var now = new Date();
	if(now.getMonth() == 1 && now.getDate() == 1){
		console.log('Happy new year!');
	}
})();
//把这段代码放在全局作用域中，可以用来确定哪一天是1月1日；如果到了这一天，打印一条新年快乐的祝贺信息。其中的变量now是匿名函数中的局部变量。
```

这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数执行完毕，就可以立即销毁其作用域链了。

>【本文内容摘自：《JavaScript高级程序设计》（第3版）Nicholas C.Zakas 著   李松峰 曹力 译】