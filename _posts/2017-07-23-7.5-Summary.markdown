---
layout: post
title: 7.5 小结
date: 2017-06-04 18:00:00  +0800
categories: [Learning, JavaScript]
tags: [JS, Private Variable]
keywords: JavaScript,private,variable,summary
description: JavaScript函数表达式
---

在JavaScript编程中，函数表达式是一种非常有用的技术。使用函数表达式可以无须对函数命名，从而实现动态编程。**匿名函数**，也称为**拉姆达函数**（ Lambda λ） ，是一种使用JavaScript函数的强大方式。

函数表达式的特点：
	- 不同于函数声明，不要求名字。
	- 在无法确定如何引用函数的情况下，递归函数就会变得复杂
	- 递归函数始终使用arguments.callee来递归地调用自身，不要使用函数名——函数名可能会发生变化

当**在函数内部定义了其他函数**时，就创建了**闭包**。闭包有权访问函数内部的所有变量，原理如下：
	- 在后台执行环境中，闭包的作用域链包含着它自己的作用域、包含函数的作用域和全局作用域；
	- 通常，函数的作用域及其所有变量都会在函数执行结束后被销毁；
	- 但是，当函数返回了一个闭包时，这个函数的作用域将会一直在内存中保存到闭包不存在为止。

使用闭包可用在JavaScript中模仿**块级作用域**（JavaScript——ES6之前本身没有块级作用域的概念）：
	- 创建并立即调用一个函数，这样即可用执行其中的代码，又不会在内存中留下对该函数的引用；
	- 结果就是函数内部的所有变量都会被立即销毁——除非将某些变量赋值给了包含作用域（即外部作用域）的变量。

闭包还可以用于在对象中创建私有变量：
	- 即使JavaScript中没有正式的私有对象属性的概念，但可以使用闭包来实现公有方法，而通过公有方法可以访问在包含作用域中定义的变量
	- 有权访问私有变量的公有方法叫**特权方法**
	- 可以使用构造函数模式、原型模式来实现自定义类型的特权方法，也可以使用模块模式、增强的模块来实现单例的特权方法。

JavaScript中的函数表达式和闭包都是极其有用的特性，利用它们可以实现很多功能。不过，因为创建闭包必须维护额外的作用域，所以过度使用它们可能会占用大量内存。

>【本文内容摘自：《JavaScript高级程序设计》（第3版）Nicholas C.Zakas 著   李松峰 曹力 译】