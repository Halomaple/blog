---
layout: post
title: "CSS 基本视觉格式化"
date: 2016-12-10 22:40:00 +0800
category: [Learning, CSS]
tag: [CSS, 盒模型, 块级元素, 行内元素, 对齐]
---


## 1 基本框

CSS假定每个元素都会生成一个或多个矩形框（未来可能包括非矩形框），这称为元素框。各元素框中心有一个内容区（content area）。这个内容区周围有可选的内边距（padding）、边框（border）和外边距（margin），这些元素的宽度都可以设置为0。

![内容区及其外围项](../images/jibenkuang.png)

外边距通常是透明的，可以看到父元素的背景。内边距不能是负值，但外边距可以。

### 1.1 包含块

每个元素相对于其包含块摆放，包含块就是一个元素的“布局上下文”。

```
<body>
	<div>
		<p>This is a paragraph.</p>
	</div>
</body>
```

`p` 元素的包含块是`div`元素，`div`的包含块是`body`元素。

### 1.2 概念复习

* 正常流：指西方语言从左向右，从上向下显示的传统HTML文档的文本布局（有些语言可能从右向左）。要让一个元素不在正常流中，唯一的办法就是使之成为浮动`float`或定位`position`元素。

* 非替换元素：如果元素的内容包含在文档中，则称之为非替换元素。例如，一个段落的文本内容都放在该元素本身之内，这个段落就是一个非替换元素。

* 替换元素：指用作为其他内容占位符的一个元素。经典例子是`img`元素，指向一个图像文件，这个文件将插入到文档流中`img`元素本身所在的位置。大多数表单元素可以体会（`<input type="radio" />）。

* 块级元素：指段落、标题或`div`之类的元素，这些元素会在其框之前和之后生成“换行”，所以处于正常流中的块级元素会垂直摆放。通过声明`display: block`来让元素生成块级框。

* 行内元素：指`strong`或`span`之类的元素，这些元素不会在之前或之后生成“行分隔符”，它们是块级元素的后代。通过声明`display: inline`来让元素生成一个行内框。

* 根元素：位于文档顶端的元素。在HTML中是`html`元素，在XML文档中则可以是该语言允许的任何元素。

## 2 块级元素

![完整的框模型](../images/boxmodel.png)

一个元素的`width`被定义为从左内边界到右内边界的距离，`height`则是从上内边界到下内边界的距离。

### 2.1 水平格式化

width影响的是**内容区的宽度**

```
<p style="width: 200px;">wideness</p>
```

这段代码使段落的内容区宽度为200像素。

如果指定了内边距、边框或外边距，这些都会增加到宽度值：

```
<p style="width: 200px; padding: 10px; margin: 20px;">wideness?</p>
```

可见元素的边框向左使220像素，因为内容的左边右边增加10像素的内边距。外边距则会在左右在延伸20像素，使整个元素框的宽度为260像素。

有一个简单的规则，正常流中块级元素的水平部分总和就等于父元素的width。

#### 2.1.1 水平属性

7大属性：`margin-left`、`border-left`、`padding-left`、`width`、`padding-right`、`border-right`、`margin-right`。

这7个属性的值加在一起必须是元素包含块的宽度，这往往是块元素的父元素的width。这之中有3个可以设为auto：元素内容的width，以及左、右外边距。其余属性必须设置为特定的值，或者默认宽度为0。

#### 2.1.2 使用auto

如果设置width、margin-left或margin-right中的某个值为auto，而余下的两个属性为指定的特定的值，那么设置的auto属性会确定所需的长度，从而使元素框的宽度等于父元素的width。

假设父元素的宽度为400px：

```
p {
	margin-left: auto; /*auto 将会是200px*/
	margin-right: 100px;
	width: 100px;
}
```

如果三个都是设置了某个固定值但加起来不到400px，这些属性就会过分受限（overconstrained），此时总会把margin-right强制为auto（从左向右读的语言）。

```
p {
	margin-left: 100px; 
	margin-right: 100px; /*margin-rigth 将会是auto，计算值是200px*/
	width: 100px;
}
```

如果左右边距都设置为auto，width是固定值100px，元素将会水平居中：

```
p {
	width: 100px;
	margin-left: auto;
	margin-right: auto;
}
```

![显示设置width](../images/widthmarginauto.png)

这不同于text-align只应用于块级元素的内联内容。

如果三个都设置为auto的话，结果是两个外边距都会设置为0，而width会尽可能宽。注意父元素的内边距、边距和外边距可能影响其子元素。

#### 2.1.3 负外边距

```
div {
	width: 400px;
	border: 3px solid black;
}
p.wide{
	margin-left: 10px;
	width: auto;
	margin-right: -50px;
}
```

效果如下：
![通过指定负外边距得到更宽的子元素](../images/minusmargin1.png)

子元素的宽度大于父元素，但数学计算并没有错：
10px + 0 + 0 + 440px + 0 + 0 - 50px = 400px

440px是`width: auto`的实际计算值，因为需要这样的一个数与等式中余下的值相抵，从而使总和为400px。尽管这导致了子元素超出了父元素，但并没有违反规范，因为7个值加在一起仍等于所需的总宽度。这在语义上有点牵强，但确实是合法的行为。

如果进一步设置内边距，width的值会减少。相反地如果其他属性可能要求设置为auto的外边距计算为负值，如width设置为500px（大于父元素）。

注意：内边距、边框和内容宽度（及高度）不可能为负。只有外边距能小于0。

#### 2.1.4 百分数

如果width、内边距和外边距设置为百分数，会应用同样的基本规则（总和等于父元素的内容宽度）。百分数相对于包含块宽度width计算的。

应避免混合使用长度和百分数，另外边框的宽度不能使用百分数，只能是长度。

#### 2.1.5 替换元素

前面讨论的非替换元素的所有规则同样适用于替换元素，只有一个例外：如果width为auto，元素的宽度则是内容的固有宽度。

下例中的图像宽度是20像素（原图像的宽度）

```
<img src="smile.png" style="display: block; width: auto; margin: 0;"/>
```
如果实际图像的宽度是100像素，那么元素的宽度也是100像素。

可以为width指定一个特定值覆盖这个规则，但注意同时height也会成比例地变化。

### 2.2 垂直格式化

一个元素的默认高度由其内容决定。高度还会受内容宽度的影响：段落越窄，相应地就会越高。

可以为任何元素设置显示高度。如果设置的高度大于元素内容的高度，则会产生有“内边距”的视觉效果。如果设置的高度小于显示内容所需的高度，用户代理的具体行为将取决于`overflow`属性的值。

像width一样，height定义了**内容区的高度**，而不是可见元素框的高度。元素框上下的内边距、边距或外边距都会增加到height值。

#### 2.2.1 垂直属性

7个属性：`margin-top`、`border-top`、`padding-top`、`height`、`padding-bottom`、`border-bottom`、`margin-bottom`

有3个可以设置为auto：元素内容的height以及上、下外边距。上下内边距和边框必须为特定的值，或者默认的0。

值得注意的是：如果正常流中一个块元素的margin-top或margin-bottom设置为auto，它会自动计算为0（对于定位元素来说处理可能有所不同）。

#### 2.2.2 百分数高度

如果一个块级正常流元素的height设置为一个百分数，这个值则是包含块height的一个百分数。

```
<div style="height: 6em;">
	<p style="height: 50%;">Half as tall</p>
</div>
```

将元素的上下外边距设置为25%，可以将元素垂直居中。

如果没有显示声明包含块的height，百分数高度会重置为auto。

#### 2.2.3 auto高度

最简单情况下，如果块级元素设置为height: auto，显示时其高度将恰好足以包含其内联内容（包括）文本的行盒。

如果块级正常流的元素高度设置为auto，而且只有块级子元素，其默认的高度将是从最高块级子元素的外边框边界到最低块级子元素边框边界之间的距离。如果元素有上内边距或下内边距，或者有上边框或下边框，其高度则是从其最高子元素的上外边距边界到其最低的子元素的下外边距边界之间的距离。(注：有点难理解，将在下一节2.2.4说明)

#### 2.2.4 合并垂直外边距

合并行为只应用于外边距。如果元素有内边距，它们不会合并。

```
li {
	margin-top: 10px;
	margin-bottom: 10px;	
}
```

每个列表项有10px的上外边距和15像素的下外边距。不过，在显示这个列表时，相邻列表之间的距离是15像素，而不是25像素。因为相邻外边距会沿着竖轴“合并”。两个外边距中较小的会被一个较大的合并。也可以用“重叠”来理解合并。

如果相邻有多个外边距，也会出现合并。考虑一下规则：

```
ul { margin-bottom: 15px;}
li { margin-top: 10px; margin-bottom: 20px;}
h1 { margin-top: 28px;}
```

列表中最后一项的下外边距为20px，ul的下外边距为15px，后面的h1的上外边距为28px。所以一旦合并这些外边距，li的结尾到h1的开始之间有28px的距离，如下图所示。

![合并外边距](../images/combinemarginvertical.png)

回到上一节2.2.3的例子，在包含块上设置边框或内边距时，会使其子元素的外边距包含在包含块内。为了解这种行为，可以在前面的例子中为ul增加一个边框：

```
ul { margin-bottom: 15px; border: 1px solid;}
li { margin-top: 10px; margin-bottom: 20px;}
h1 { margin-top: 28px;}
```

做了这个改变之后，li元素的下外边距现在放在其父元素内部（ul）。因此，这里只会在ul和h1之间发生外边距合并，如下图所示：

![增加边框后的合并](../images/margincombineoutsidecontainer.png)

#### 2.2.5 负外边距

负外边距会影响外边距如何合并。

* 如果垂直外边距都设置为负值，浏览器会取两个外边距绝对值的最大值；
* 如果一个正外边距和一个负外边距合并，会从正外边距减去这个负外边距的绝对值。

```
ul { margin-bottom: -15px;}
li { margin-bottom: -18px;}
h1 { margin-top: 20px;}
```

![正负外边距合并详解](../images/minusmargincombinevertically.png)

### 2.3 列表项

与一个列表项元素关联的标志可能在列表项之外，也可能处理为内容开始处的一个内联标志，这取决于属性`list-style-position`的值。

![标志放在列表内部和外部](../images/list-style-position.png)

## 3 行内元素

注：本节介绍的所有行为都不适用于表元素。CSS2对于表和表内容的处理引入了一些新的属性和行为，表元素的表现与块级元素或行内元素大相径庭。

### 3.1 行布局

### 3.2 基本术语和概念

* 匿名文本：指未包含在行内元素内的文本，包括空格`<p>Anonymous <em>not anonymous text</em> text <p>`

* em框：在字体中定义，实际字体可能比其em框更高。

* 内容区： 可以是元素中各字符的



























